/*
 * [542] 01 Matrix
 *
 * https://leetcode.com/problems/01-matrix/description/
 *
 * algorithms
 * Medium (33.01%)
 * Total Accepted:    21.7K
 * Total Submissions: 65.5K
 * Testcase Example:  '[[0,0,0],[0,1,0],[0,0,0]]'
 *
 *
 * Given a matrix consists of 0 and 1, find the distance of the nearest 0 for
 * each cell.
 *
 * The distance between two adjacent cells is 1.
 *
 * Example 1:
 * Input:
 *
 * 0 0 0
 * 0 1 0
 * 0 0 0
 *
 * Output:
 *
 * 0 0 0
 * 0 1 0
 * 0 0 0
 *
 *
 *
 * Example 2:
 * Input:
 *
 * 0 0 0
 * 0 1 0
 * 1 1 1
 *
 * Output:
 *
 * 0 0 0
 * 0 1 0
 * 1 2 1
 *
 *
 *
 * Note:
 *
 * The number of elements of the given matrix will not exceed 10,000.
 * There are at least one 0 in the given matrix.
 * The cells are adjacent in only four directions: up, down, left and right.
 *
 *
 *
 */
class Solution {
    private int dfs(int[][] matrix, int r, int c, int[][] dis, boolean[][] visit) {
        if (matrix[r][c] == 0) {
            dis[r][c] = 0;
            return 0;
        }
        int min = Integer.MAX_VALUE;
        visit[r][c] = true;
        boolean mask = false;
        for (int i = -1; i <= 1; i++) {
            for (int j = -1; j <= 1; j++) {
                if ((i == 0 && j == 0) || r + i < 0 || c + j < 0 || r + i >= matrix.length || c + j >= matrix[0].length)
                    continue;
                else {
                    if (!visit[r + i][c + j]) {
                        visit[r + i][c + j] = true;
                        min = Math.min(min, dfs(matrix, r + i, c + j, dis, visit) + 1);
                    }
                }
            }
            if (mask)
                break;
        }
        dis[r][c] = min;
        return min;
    }
    public int[][] updateMatrix(int[][] matrix) {
        int m = matrix.length, n = matrix[0].length;
        int[][] dis = new int[m][n];
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                if (matrix[i][j] == 1)
                    dfs(matrix, i, j, dis, new boolean[m][n]);
            }
        }
        return dis;
    }
}
